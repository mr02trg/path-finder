{"version":3,"sources":["utils/utils.js","utils/priorityQueue.js","utils/graphAlgo.js","constants/Graph.js","components/MyTarget.js","Grid.js","constants/Algo.js","App.js","serviceWorker.js","index.js"],"names":["isMember","currPos","arr","some","item","isEqual","create2DArray","dimension","fillValue","Array","from","height","fill","width","PriorityQueue","this","pq","enqueue","data","push","dequeue","node","minBy","pull","isEmpty","length","print","console","log","exploreNeighbours","gridDimension","dx","dy","neighbours","i","nx","x","ny","y","aStar","srcPos","destPos","myGraph","heuristic","j","Math","abs","sqrt","computeHeuristic","currNode","cost","pred","visited","forEach","neighbour","filter","pos","shortestPath","constructPath","path","unshift","MyTarget","targetType","props","draggable","onDragStart","className","aria-hidden","Grid","cellStyle","ref","useRef","getCells","elSize","getDimension","divElSize","current","clientWidth","clientHeight","useState","loading","setLoading","setGraph","setDimension","isMouseDown","setIsMouseDown","dragType","setDragType","algo","setAlgo","setSrcPos","setDestPos","useEffect","handleResize","d","window","addEventListener","removeEventListener","createWall","cell","clone","handleCellMouseUp","renderShortestPath","setTimeout","document","getElementById","showTarget","type","style","minWidth","value","onChange","e","target","role","onClick","result","q","shift","bfs","currVisited","disabled","resetVisualise","map","r","key","id","onMouseDown","handleCellMouseDown","onMouseOver","handleCellMouseOver","onMouseUp","onDragOver","event","preventDefault","onDrop","handleDrop","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f0f4ba1.chunk.js","sourcesContent":["import { fill, some, isEqual } from 'lodash';\n\nexport const isMember = (currPos, arr) => some(arr, item => isEqual(item, currPos));\nexport const create2DArray = \n  (dimension, fillValue) => Array.from(Array(dimension.height), () => fill(Array(dimension.width), fillValue));","import { minBy, pull } from 'lodash';\n\nfunction PriorityQueue () {\n  this.pq = [];\n  \n  this.enqueue = (data) => {\n    this.pq.push(data);\n  };\n\n  this.dequeue = () => {\n    const node = minBy(this.pq, 'cost');\n    pull(this.pq, node);\n    return node;\n  }\n\n  this.isEmpty = () => {\n    return this.pq.length === 0;\n  };\n\n  this.print =() => {\n    console.log(this.pq);\n  }\n};\n\nexport default PriorityQueue;\n","import { isEmpty, forEach, filter, isEqual } from 'lodash';\nimport { DEST, WALL } from '../constants/Graph';\n\nimport { isMember, create2DArray } from './utils';\nimport PriorityQueue from './priorityQueue';\n\nconst exploreNeighbours = (currPos, gridDimension) => {\n  const dx = [-1, 1, 0 , 0]\n  const dy = [0 , 0, 1, -1]\n  const neighbours = []\n  for(let i = 0; i < 4; i++) {\n    const nx = currPos.x + dx[i]\n    const ny = currPos.y + dy[i]\n\n    if (nx < 0 || ny < 0) continue\n    if (nx >= gridDimension.width || ny >= gridDimension.height) continue\n    neighbours.push({x: nx, y: ny})\n  }\n  return neighbours;\n}\n\nexport const bfs  = (srcPos, destPos, myGraph, dimension) => {\n  const q = [srcPos];\n  const pred = create2DArray(dimension, null);\n  let visited = [srcPos];\n  while (! isEmpty(q)) {\n    const currNode = q.shift();\n    if (myGraph[currNode.y][currNode.x] === DEST) {\n      break;\n    }\n\n    const neighbours = exploreNeighbours(currNode, dimension);\n\n    forEach(neighbours, neighbour => {\n      if (myGraph[neighbour.y][neighbour.x] === WALL) {\n        visited.push(neighbour);\n        return;\n      }\n\n      if (! isMember(neighbour, visited)) {\n        q.push(neighbour);\n        visited.push(neighbour);\n        pred[neighbour.y][neighbour.x] = currNode;\n      }\n    });\n  }\n\n  // remove all obstacle visited nodes\n  visited = filter(visited, pos => myGraph[pos.y][pos.x] !== WALL);\n\n  // backtrack shortest path\n  const shortestPath = constructPath(srcPos, destPos, pred);\n  return {visited, shortestPath};\n} \n\nconst computeHeuristic = (destPos, dimension) => {\n  const heuristic = create2DArray(dimension, 0);\n  for(let i = 0; i < heuristic.length; i++) {\n    for(let j = 0; j < heuristic[i].length; j++) {\n      const dx = Math.abs(destPos.x - j);\n      const dy = Math.abs(destPos.y - i);\n      heuristic[i][j] = Math.sqrt(dx*dx + dy*dy);\n    }\n  }\n  return heuristic;\n}\n\nexport const aStar = (srcPos, destPos, myGraph, dimension) => {\n  const heuristic = computeHeuristic(destPos, dimension);\n  // console.log(heuristic);\n  const pq = new PriorityQueue();\n  pq.enqueue({currNode: srcPos, cost: heuristic[srcPos.y][srcPos.x]})\n  const pred = create2DArray(dimension, null);\n  let visited = [srcPos];\n  while (! pq.isEmpty()) {\n    const {currNode, cost} = pq.dequeue();\n    if (myGraph[currNode.y][currNode.x] === DEST) {\n      break;\n    }\n\n    const neighbours = exploreNeighbours(currNode, dimension);\n\n    forEach(neighbours, neighbour => {\n      if (myGraph[neighbour.y][neighbour.x] === WALL) {\n        visited.push(neighbour);\n        return;\n      }\n\n      if (! isMember(neighbour, visited)) {\n        pq.enqueue({currNode: neighbour, cost: heuristic[neighbour.y][neighbour.x]})\n        visited.push(neighbour);\n        pred[neighbour.y][neighbour.x] = currNode;\n      }\n    });\n  }\n\n  // remove all obstacle visited nodes\n  visited = filter(visited, pos => myGraph[pos.y][pos.x] !== WALL);\n\n  // backtrack shortest path\n  const shortestPath = constructPath(srcPos, destPos, pred);\n  return {visited, shortestPath};\n}\n\nconst constructPath = (srcPos, destPos, arr) => {\n  const path = [destPos];\n  let currNode = arr[destPos.y][destPos.x];\n  while(! isEqual(currNode, srcPos)) {\n    path.unshift(currNode);\n    currNode = arr[currNode.y][currNode.x];\n  }\n  path.unshift(srcPos);\n  return path;\n}","export const EMPTY = '.'\nexport const WALL = 'w'\nexport const SOURCE = 's'\nexport const DEST = 'e'","import React from 'react';\nimport './MyTarget.scss';\n\nimport { SOURCE } from '../constants/Graph'\n\nconst MyTarget = ({ targetType, ...props }) => {\n  return (\n    <div draggable onDragStart={props.onDragStart}>\n      {targetType === SOURCE ? (\n        <i className=\"fa fa-heart-o fa-lg\" aria-hidden=\"true\"></i>\n      ) : (\n        <i className=\"fa fa-heart fa-lg\" aria-hidden=\"true\"></i>\n      )}\n    </div>\n  )\n}\n\nexport default MyTarget;","import React, { useState, useRef, useEffect } from 'react';\nimport { clone } from 'lodash';\nimport './Grid.scss';\n\nimport { create2DArray } from './utils/utils';\nimport { bfs, aStar } from './utils/graphAlgo';\nimport {EMPTY, SOURCE, DEST, WALL} from './constants/Graph';\nimport { BFS, A_STAR } from './constants/Algo';\nimport MyTarget from './components/MyTarget';\n\nconst Grid = () => {\n  const CELL_SIZE = 35;\n  const cellStyle = {width: `${CELL_SIZE}px`, height: `${CELL_SIZE}px`};\n\n  const ref = useRef(null);\n  const getCells = elSize => ((elSize - elSize%CELL_SIZE)/CELL_SIZE);\n  const getDimension = () => {\n    const divElSize = {\n      width: ref && ref.current ? ref.current.clientWidth : 0,\n      height: ref && ref.current ? ref.current.clientHeight : 0\n    }\n    return {\n      width: getCells(divElSize.width),\n      height: getCells(divElSize.height)\n    }\n  }\n\n  const [loading, setLoading] = useState(false);\n\n  const [myGraph, setGraph] = useState(null);\n  const [, setDimension] = useState(getDimension());\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [dragType, setDragType] = useState('');\n  const [algo, setAlgo] = useState(BFS);\n  const [srcPos, setSrcPos] = useState();\n  const [destPos, setDestPos] = useState();\n\n  // on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const d = getDimension();\n      setDimension(d);\n      setGraph(create2DArray(d, EMPTY));\n      setSrcPos(null);\n      setDestPos(null);\n    }\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const createWall = (x, y) => {\n    let cell = myGraph[y][x];\n    if (cell === EMPTY) {\n      myGraph[y][x] = WALL;\n    }\n    else if (cell === WALL) {\n      myGraph[y][x] = EMPTY;\n    }\n    setGraph(clone(myGraph));\n  }\n\n  const handleCellMouseDown = (x, y) => {\n    if (myGraph[y][x] === SOURCE || myGraph[y][x] === DEST)\n      return;\n    setIsMouseDown(true);\n    createWall(x,y);\n  }\n\n  const handleCellMouseOver = (x, y) => {\n    if(isMouseDown) {\n      createWall(x,y);\n    }\n  }\n\n  const handleCellMouseUp = () => {\n    setIsMouseDown(false);\n  }\n\n  const handleDrop = (x, y) => {\n    switch (dragType) {\n      case SOURCE:\n        if (srcPos) {\n          myGraph[srcPos.y][srcPos.x] = EMPTY\n        }\n        myGraph[y][x] = SOURCE\n        setSrcPos({x ,y})\n        break;\n      case DEST:\n        if (destPos) {\n          myGraph[destPos.y][destPos.x] = EMPTY\n        }\n        myGraph[y][x] = DEST\n        setDestPos({x ,y})\n        break;\n      default:\n    }\n\n    setDragType('');\n  }\n\n  const resetVisualise = () => {\n    setGraph(create2DArray(getDimension(), EMPTY));\n    setSrcPos(null);\n    setDestPos(null);\n    for(let i = 0; i < myGraph.length; i++) {\n      for(let j = 0; j < myGraph[i].length; j++) {\n        document.getElementById(`node-${j}-${i}`).className = 'node';\n      }\n    }\n  }\n  \n  const visualisePath = () => {\n    setLoading(true);\n    let result = null;\n    switch(algo) {\n      case A_STAR:\n        result = aStar(srcPos, destPos, myGraph, getDimension());\n        break;\n      default: \n        result = bfs(srcPos, destPos, myGraph, getDimension());\n    }\n\n    if (result) {\n      const {visited, shortestPath} = result;\n      // render visited path\n      for(let i = 0; i < visited.length; i++) {\n        setTimeout(() => {\n          const currVisited = visited[i];\n          const node = document.getElementById(`node-${currVisited.x}-${currVisited.y}`);\n          if (node) {\n            node.className = 'node visited';\n          }\n        }, i * 20);\n\n        // render shortest path\n        if (i === visited.length - 1) {\n          setTimeout(() => {\n            renderShortestPath(shortestPath);\n          }, i * 20 + 1500);    // add 2s for animation duration\n        }\n      }\n    }\n  }\n\n  const renderShortestPath = path => {\n    for(let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const currPos = path[i];\n        const node = document.getElementById(`node-${currPos.x}-${currPos.y}`);\n        if (node) {\n          node.className = 'node shortest-path';\n        }\n      }, i * 100);\n\n      if (i === path.length - 1) {\n        setTimeout(() => {\n          setLoading(false);\n        }, i * 100 + 1000);\n      }\n    }\n  }\n\n  const showTarget = type => {\n    return (\n      <div className=\"d-flex px-3 align-items-center\">\n        <div \n          style={cellStyle} \n          className=\"drag-component\" \n          draggable\n          onDragStart={() => setDragType(type)}\n        >\n          <MyTarget targetType={type}></MyTarget>\n        </div>\n        <div>{type === SOURCE ? 'Source' : 'Destination'}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className=\"grid-container\" \n      ref={ref} \n    >\n      <div className=\"menu-bar\">\n        {!srcPos && showTarget(SOURCE)}\n        {!destPos && showTarget(DEST)}\n        <div className=\"d-flex ml-auto\">\n          <select \n            className=\"form-control mr-3\" \n            style={{minWidth: \"100px\"}}\n            value={algo}\n            onChange={e => setAlgo(e.target.value)}\n          >\n            <option value={BFS}>BFS</option>\n            <option value={A_STAR}>A*</option>\n          </select>\n          {loading ? (\n            <>\n            <div className=\"spinner-border\" role=\"status\">\n              <span>Whee...</span>\n            </div>\n            </>\n          ) : (\n            <>\n            <button \n              className=\"btn btn-primary mr-3\" \n              onClick={visualisePath} \n              disabled={!srcPos || !destPos}>\n              Visualise    \n            </button>\n            <button className=\"btn btn-light\" onClick={() => resetVisualise()} disabled={!srcPos || !destPos}>Reset</button>\n            </>\n          )}\n        </div>\n      </div>\n\n      <table className=\"grid\">\n        <tbody>\n          {myGraph && myGraph.map((r,y) => {\n            return (\n              <tr key={y}>\n              {r.map((cell,x) => {\n                return (\n                  <td key={x}>\n                    <div \n                      id={`node-${x}-${y}`}\n                      className={` node ${cell === WALL ? 'wall' : null} `}\n                      style={cellStyle}\n                      onMouseDown={() => handleCellMouseDown(x, y)}\n                      onMouseOver={() => handleCellMouseOver(x, y)}\n                      onMouseUp={handleCellMouseUp}\n                      onDragOver={event => event.preventDefault()}\n                      onDrop={() => handleDrop(x, y)}\n                    >\n                      {cell === SOURCE && <MyTarget targetType={SOURCE} onDragStart={() => setDragType(SOURCE)}></MyTarget>}\n                      {cell === DEST && <MyTarget targetType={DEST} onDragStart={() => setDragType(DEST)}></MyTarget>}\n                    </div>\n                  </td>\n                )\n              })}\n            </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Grid;","export const BFS = 'BFS';\nexport const A_STAR = 'A_STAR';","import React from 'react';\nimport Grid from './Grid';\nimport './App.scss';\n\nconst App = () => {\n\n  return (\n    <div className=\"app\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}